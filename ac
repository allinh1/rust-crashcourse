[1mdiff --git a/src/arrays.rs b/src/arrays.rs[m
[1mnew file mode 100644[m
[1mindex 0000000..27c803f[m
[1m--- /dev/null[m
[1m+++ b/src/arrays.rs[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32m// Arrays - Fixed list where elements are the same data types[m
[32m+[m
[32m+[m[32muse std::mem;[m
[32m+[m
[32m+[m[32mpub fn run() {[m
[32m+[m[32m  let mut numbers: [i32; 4] = [1, 2, 3, 4];[m
[32m+[m
[32m+[m[32m  // Re-assign value[m
[32m+[m[32m  numbers[2] = 20;[m
[32m+[m
[32m+[m[32m  println!("{:?}", numbers);[m
[32m+[m
[32m+[m[32m  // Get single val[m
[32m+[m[32m  println!("Single Value: {}", numbers[0]);[m
[32m+[m
[32m+[m[32m  // Get array length[m
[32m+[m[32m  println!("Array Length: {}", numbers.len());[m
[32m+[m
[32m+[m[32m  // Arrays are stack allocated[m
[32m+[m[32m  println!("Array occupies {} bytes", mem::size_of_val(&numbers));[m
[32m+[m
[32m+[m[32m  // Get Slice[m
[32m+[m[32m  let slice: &[i32] = &numbers[1..3];[m
[32m+[m[32m  println!("Slice: {:?}", slice);[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/conditionals.rs b/src/conditionals.rs[m
[1mnew file mode 100644[m
[1mindex 0000000..36f92f6[m
[1m--- /dev/null[m
[1m+++ b/src/conditionals.rs[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32mpub fn run() {[m
[32m+[m[32m    let age: u8 = 22;[m
[32m+[m[32m    let check_id: bool = true;[m
[32m+[m[32m    let knows_person_of_age = true;[m
[32m+[m[41m  [m
[32m+[m[32m    // If/Else[m
[32m+[m[32m    if age >= 21 && check_id || knows_person_of_age {[m
[32m+[m[32m      println!("Bartender: What would you like to drink?");[m
[32m+[m[32m    } else if age < 21 && check_id {[m
[32m+[m[32m      println!("Bartender: Sorry, you have to leave");[m
[32m+[m[32m    } else {[m
[32m+[m[32m      println!("Bartender: I'll need to see your ID");[m
[32m+[m[32m    }[m
[32m+[m[41m  [m
[32m+[m[32m    // Shorthand If[m
[32m+[m[32m    let is_of_age = if age >= 21 { true } else { false };[m
[32m+[m[32m    println!("Is Of Age: {}", is_of_age)[m
[32m+[m[32m  }[m
\ No newline at end of file[m
[1mdiff --git a/src/main.rs b/src/main.rs[m
[1mindex 4e524d3..387aa0a 100644[m
[1m--- a/src/main.rs[m
[1m+++ b/src/main.rs[m
[36m@@ -1,5 +1,9 @@[m
[31m-mod print;[m
[32m+[m[32m// mod print;[m
[32m+[m[32m// mod vectors;[m
[32m+[m[32mmod conditionals;[m
[32m+[m
 [m
 fn main() {[m
[31m-    print::run();[m
[32m+[m[32m    conditionals::run();[m
 }[m
[41m+[m
[1mdiff --git a/src/print.rs b/src/print.rs[m
[1mindex 4fc03ad..16b7c49 100644[m
[1m--- a/src/print.rs[m
[1m+++ b/src/print.rs[m
[36m@@ -6,6 +6,23 @@[m [mpub fn run() {[m
     println!("{} is from {}", "Allen", "Sydney");[m
 [m
     // Positional Arguments[m
[31m-  [m
[31m-    println!("{1} is from {0} and likes to {2}", "Allen", "Sydney", "code")[m
[31m-}[m
\ No newline at end of file[m
[32m+[m[32m    println!([m
[32m+[m[32m        "{1} is from {0} and likes to {2}",[m
[32m+[m[32m        "Allen", "Sydney", "code"[m
[32m+[m[32m    );[m
[32m+[m
[32m+[m[32m    // Named Arguments[m
[32m+[m[32m    println!([m
[32m+[m[32m        "{name} likes to play {activity}",[m
[32m+[m[32m        name = "John",[m
[32m+[m[32m        activity = "Baseball"[m
[32m+[m[32m    );[m
[32m+[m[32m    // Placeholder traits[m
[32m+[m[32m    println!("Binary: {:b} Hex: {:x} Octal: {:o}", 10, 10, 10);[m
[32m+[m
[32m+[m[32m    // Placeholder for debug trait[m
[32m+[m[32m    println!("{:?}", (12, true, "hello"));[m
[32m+[m
[32m+[m[32m    // Basic math[m
[32m+[m[32m    println!("10 + 10 = {}", 10 + 10);[m
[32m+[m[32m}[m
[1mdiff --git a/src/vars.rs b/src/vars.rs[m
[1mnew file mode 100644[m
[1mindex 0000000..d0b9c40[m
[1m--- /dev/null[m
[1m+++ b/src/vars.rs[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m// Variables hold primitive data or references to data[m
[32m+[m[32m// Variables are immutable by default[m
[32m+[m[32m// Rust is a block-scoped language[m
[32m+[m
[32m+[m[32mpub fn run() {[m
[32m+[m[32m    let name = "Brad";[m
[32m+[m[32m    let mut age = 37;[m
[32m+[m[32m    println!("My name is {} and I am {}", name, age);[m
[32m+[m[32m    age = 38;[m
[32m+[m[32m    println!("My name is {} and I am {}", name, age);[m
[32m+[m[32m    // Define constant[m
[32m+[m[32m    const ID: i32 = 001;[m
[32m+[m[32m    println!("ID: {}", ID);[m
[32m+[m[32m    // Assign multiple vars[m
[32m+[m[32m    let (my_name, my_age) = ("Brad", 37);[m
[32m+[m[32m    println!("{} is {}", my_name, my_age);[m
[32m+[m[32m}[m
[1mdiff --git a/src/vectors.rs b/src/vectors.rs[m
[1mnew file mode 100644[m
[1mindex 0000000..c2ccf3b[m
[1m--- /dev/null[m
[1m+++ b/src/vectors.rs[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32m//Vectors resizable arrays.[m
[32m+[m
[32m+[m[32muse std::mem;[m
[32m+[m
[32m+[m[32mpub fn run() {[m
[32m+[m[32m  let mut numbers: Vec<i32> = vec![1, 2, 3, 4];[m
[32m+[m
[32m+[m[32m  // Re-assign value[m
[32m+[m[32m  numbers[2] = 20;[m
[32m+[m
[32m+[m[32m  println!("{:?}", numbers);[m
[32m+[m
[32m+[m[32m  // Get single val[m
[32m+[m[32m  println!("Single Value: {}", numbers[0]);[m
[32m+[m
[32m+[m[32m  // Get array length[m
[32m+[m[32m  println!("Vector Length: {}", numbers.len());[m
[32m+[m
[32m+[m[32m  // Arrays are stack allocated[m
[32m+[m[32m  println!("Vector occupies {} bytes", mem::size_of_val(&numbers));[m
[32m+[m
[32m+[m[32m  // Get Slice[m
[32m+[m[32m  let slice: &[i32] = &numbers[1..3];[m
[32m+[m[32m  println!("Slice: {:?}", slice);[m
[32m+[m[32m}[m
